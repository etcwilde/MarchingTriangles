/*
 * Mesh
 *
 * File: 	Mesh.cpp
 * Author:	Evan Wilde		<etcwilde@uvic.ca>
 * Date:	Mar 12 2015
 */

#include "Mesh.hpp"

using namespace Explicit;

Face::Face()
{
	m_vertex_index[0] = 0;
	m_vertex_index[1] = 0;
	m_vertex_index[2] = 0;

	m_normal_index[0] = 0;
	m_normal_index[1] = 0;
	m_normal_index[2] = 0;
}

Mesh::Mesh() :
	m_vertex_atlas(),
	m_normal_atlas(),
	m_faces()
{ }

void Mesh::push_vertex(glm::vec3 vertex)
{
	m_vertex_atlas.push_back(vertex);
}

void Mesh::push_normal(glm::vec3 normal)
{
	m_normal_atlas.push_back(normal);
}

void Mesh::push_face(Face f)
{
	m_faces.push_back(f);
}

// Lol
void Mesh::Draw()
{
	for (auto faces = m_faces.begin(); faces != m_faces.end(); faces++)
	{
		Triangle t(
				m_vertex_atlas[(*faces).m_vertex_index[0] - 1],
				m_vertex_atlas[(*faces).m_vertex_index[1] - 1],
				m_vertex_atlas[(*faces).m_vertex_index[2] - 1]);
		t.Draw();
	}
}

void Mesh::Export()
{
	std::filebuf fb;
	fb.open("output.obj", std::ios::out);
	std::ostream os(&fb);

	std::string comment = "# Mesh Generated by Marching Triangle\n"
		"# Program written by Evan Wilde 2015\n";

	os << comment;

	// Write vertex data
	for (unsigned int i = 0; i < m_vertex_atlas.size(); ++i)
	{
#ifdef DEBUG
		std::cout << "v " <<
			m_vertex_atlas[i].x << " " <<
			m_vertex_atlas[i].y << " " <<
			m_vertex_atlas[i].z << '\n';
#endif

		os << "v " <<
			m_vertex_atlas[i].x << " " <<
			m_vertex_atlas[i].y << " " <<
			m_vertex_atlas[i].z << '\n';
	}

	// Write vertex normal data
	for (unsigned int i = 0; i < m_normal_atlas.size(); ++i)
	{
#ifdef DEBUG
		std::cout << "vn " <<
			m_normal_atlas[i].x << " " <<
			m_normal_atlas[i].y << " " <<
			m_normal_atlas[i].z << '\n';
#endif

		os << "vn " <<
			m_normal_atlas[i].x << " " <<
			m_normal_atlas[i].y << " " <<
			m_normal_atlas[i].z << '\n';
	}

	// Write Face data
	for (std::list<Face>::iterator face = m_faces.begin();
			face != m_faces.end(); face++)
	{
		// Gross but correct
		os << "f "
			<< (*face).m_vertex_index[0]
			<< '/'<< '/'
			<< (*face).m_normal_index[0]
			<< ' '
			<< (*face).m_vertex_index[1]
			<< '/'<< '/'
			<< (*face).m_normal_index[1]
			<< ' '
			<< (*face).m_vertex_index[2]
			<< '/'<< '/'
			<< (*face).m_normal_index[2]
			<< '\n';
	}


	os << "# Vertices Written " << m_vertex_atlas.size() << '\n';
	os << "# Normals Written " << m_normal_atlas.size() << '\n';
	os << "# Triangles written " << m_faces.size();
	std::string faces;
	fb.close();
}


