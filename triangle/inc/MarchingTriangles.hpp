/*
 * MarchingTriangles
 *
 * File: 	MarchingTriangles.hpp
 * Author:	Evan Wilde		<etcwilde@uvic.ca>
 * Date:	Mar 16 2015
 */

#ifndef MARCHING_TRIANGLES_HPP
#define MARCHING_TRIANGLES_HPP

#include "Polygonizer.hpp"

#ifdef DEBUG
#include <iostream>
#endif

class MarchingTriangles : public Polygonizer
{
public:
	MarchingTriangles(Implicit::Object* obj);
	MarchingTriangles(Implicit::Object* obj, float error);
	MarchingTriangles(Implicit::Object* obj, float error, float growth);
protected:

	void SeedTriangle();

	void Polygonize();

	struct edge
	{
	public:
		glm::vec3 pt1; glm::vec3 pt2;
		inline float length()
		{ return glm::length(pt1 - pt2); };

		inline glm::vec3 direction()
		{ return glm::normalize(pt1 - pt2); };
	};


	float m_size; // Generated by start

	// Not sure which is a better metric for generating better meshes
	float m_growth; //Default 1
	float m_error; //The epsilon used for calculations
	float m_max_curvature;
	// If error == 0, then use growth exclusively
};

#endif //MARCHING_TRIANGLES_HPP
